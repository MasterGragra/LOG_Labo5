@startuml
title Diagramme de séquence de la commande zoom
autonumber

actor Utilisateur
participant ":StackPane" as Pane
participant ":ImageController" as Controller
participant ":ControleZoom" as Controle
participant ":CommandManager" as CmdMgr
participant ":Perspective" as Model
participant ":VuePrincipale" as Vue

Utilisateur -> Pane : scroll
activate Pane
    note left of Pane
        L'utilisateur utilise la molette
        de la souris pour zoomer/dézoomer
    end note

    Pane -> Controller : événement de défilement
    activate Controller
        Controller -> Controle : gererEvenement(event, TypeEvenement.SCROLL)
        activate Controle
            note right of Controle
                Le contrôle vérifie si l'événement
                est bien un ScrollEvent
            end note

            Controle -> Controle : if (event instanceof ScrollEvent)
            Controle -> Controle : facteurZoomInitial = perspective.getFacteurEchelle()
            Controle -> Controle : facteurZoomFinal = facteurZoomInitial + (deltaY * 0.01)

            create ":CommandeZoom" as Cmd
            Controle -> Cmd : new CommandeZoom(perspective, facteurZoomFinal)

            Controle -> Cmd : setFacteurInitial(facteurZoomInitial)
            activate Cmd
                Cmd --> Controle
            deactivate Cmd

            Controle -> CmdMgr : executeCommand(commandeZoom)
            activate CmdMgr
                note left of CmdMgr
                    Le CommandManager exécute la commande
                    et la stocke dans l'historique
                end note

                CmdMgr -> Cmd : execute()
                activate Cmd
                    Cmd -> Model : setFacteurEchelle(facteurZoomFinal)
                    activate Model
                        Model -> Model : facteurEchelle.set(facteur)
                        Model -> Model : notifyObservers()
                        activate Model
                            note right of Model
                                Pattern Observer: la perspective
                                notifie toutes les vues
                                qui l'observent
                            end note

                            loop pour chaque observer
                                Model -> Vue : update(subject)
                                activate Vue
                                    Vue -> Vue : dessiner()
                                deactivate Vue
                            end
                        deactivate Model
                    deactivate Model
                    Cmd --> CmdMgr
                deactivate Cmd

                CmdMgr -> CmdMgr : commandesExecutees.push(command)
                CmdMgr -> CmdMgr : clearRedoStack()
                CmdMgr -> CmdMgr : updateProperties()
                note right: Met à jour canUndoProperty et canRedoProperty
                CmdMgr --> Controle
            deactivate CmdMgr
            Controle --> Controller
        deactivate Controle
        Controller --> Pane
    deactivate Controller
deactivate Pane

@enduml